{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rieck\\\\Documents\\\\Coding\\\\Spotify\\\\client\\\\src\\\\Components\\\\CustomPlaylistForm.js\";\nimport React, { useState } from 'react'; //Bootstrap\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Modal from 'react-bootstrap/Modal'; //Component\n\nimport Selector from './Selector.js';\n\nfunction MyVerticallyCenteredModal(props) {\n  return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n    size: \"lg\",\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    id: \"contained-modal-title-vcenter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, \"Modal heading\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, \"Centered Modal\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: props.onHide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, \"Close\")));\n}\n\nfunction CustomPlaylistForm(props) {\n  const [selectorCount, setSelectorCount] = useState(0);\n  const [searchList, setSearchList] = useState([[], [], []]);\n  const [playlistName, setPlaylistName] = useState(\"Playlist\");\n  const [playlistDescription, setPlaylistDescription] = useState(\"\");\n  const [numberOfSongs, setNumberOfSongs] = useState(0);\n  const [isPublic, setIsPublic] = useState(false);\n  const [isCollab, setIsCollab] = useState(false);\n  const [searchRecs, setSearchRecs] = useState([]);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  function handleSubmit() {\n    /*const testParams = {\r\n        limit: 1\r\n    }\r\n    props.spotify.search(searchList[0][0], [\"track\"], testParams)\r\n    .then((res) => {\r\n        console.log(\"test\")\r\n        console.log(res)\r\n    })*/\n    const recommendationParams = {\n      limit: numberOfSongs,\n      seed_artists: searchList[1].map(element => element.split(';')[2]),\n      seed_genres: searchList[2].map(element => element.split(';')[0]),\n      seed_tracks: searchList[0].map(element => element.split(';')[2])\n    };\n    props.spotify.getRecommendations(recommendationParams).then(recommendations => {\n      console.log(recommendations);\n      const playlistParams = {\n        name: playlistName,\n        public: isPublic,\n        collaborative: isCollab,\n        description: playlistDescription\n      };\n      props.spotify.createPlaylist(props.current, playlistParams).then(async response => {\n        await props.spotify.getUserPlaylists(props.current, playlistParams).then(playlists => {\n          console.log(playlists);\n          playlists.items.forEach(item => {\n            console.log(item.name);\n\n            if (item.name.toString() === playlistName && item.tracks.total === 0) {\n              props.spotify.addTracksToPlaylist(item.id, recommendations.tracks.map(track => track.uri));\n            }\n          });\n        });\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  function handleName(name) {\n    setPlaylistName(name);\n  }\n\n  function handleDescription(description) {\n    setPlaylistDescription(description);\n  }\n\n  function handleNumber(number) {\n    setNumberOfSongs(parseInt(number));\n  }\n\n  function handleCollab(boolVal) {\n    setIsCollab(boolVal);\n  }\n\n  function handlePublic(boolVal) {\n    setIsPublic(boolVal);\n  }\n\n  function convertToStrings(songs) {\n    let songIds = [];\n    return new Promise(function (resolve, reject) {\n      songs.forEach(song => {});\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    id: \"customForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    class: \"formLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }, \"Playlist Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Playlist\",\n    onBlur: e => handleName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, \"Select Up To 5 Of The Following\"), /*#__PURE__*/React.createElement(ListGroup, {\n    horizontal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    title: \"Song\",\n    spotify: props.spotify,\n    count: selectorCount,\n    setCount: setSelectorCount,\n    list: searchList,\n    setList: setSearchList,\n    recs: searchRecs,\n    setRecs: setSearchRecs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    title: \"Artist\",\n    spotify: props.spotify,\n    count: selectorCount,\n    setCount: setSelectorCount,\n    list: searchList,\n    setList: setSearchList,\n    recs: searchRecs,\n    setRecs: setSearchRecs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    title: \"Genre\",\n    spotify: props.spotify,\n    count: selectorCount,\n    setCount: setSelectorCount,\n    list: searchList,\n    setList: setSearchList,\n    recs: searchRecs,\n    setRecs: setSearchRecs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    class: \"formLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, \"Playlist Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"textarea\",\n    rows: \"3\",\n    placeholder: \"Description\",\n    onBlur: e => handleDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    class: \"formLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }, \"Number Of Songs\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"1-100\",\n    onBlur: e => handleNumber(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: () => setModalShow(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, \"Launch vertically centered modal\"), /*#__PURE__*/React.createElement(MyVerticallyCenteredModal, {\n    show: modalShow,\n    onHide: () => setModalShow(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    label: \"Public Playlist\",\n    onChange: e => handlePublic(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    label: \"Collaborative Playlist\",\n    onChange: e => handleCollab(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"button\",\n    onClick: () => handleSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, \"Create Playlist\")));\n}\n\nexport default CustomPlaylistForm;","map":{"version":3,"sources":["C:/Users/rieck/Documents/Coding/Spotify/client/src/Components/CustomPlaylistForm.js"],"names":["React","useState","Button","Form","ListGroup","Modal","Selector","MyVerticallyCenteredModal","props","onHide","CustomPlaylistForm","selectorCount","setSelectorCount","searchList","setSearchList","playlistName","setPlaylistName","playlistDescription","setPlaylistDescription","numberOfSongs","setNumberOfSongs","isPublic","setIsPublic","isCollab","setIsCollab","searchRecs","setSearchRecs","modalShow","setModalShow","handleSubmit","recommendationParams","limit","seed_artists","map","element","split","seed_genres","seed_tracks","spotify","getRecommendations","then","recommendations","console","log","playlistParams","name","public","collaborative","description","createPlaylist","current","response","getUserPlaylists","playlists","items","forEach","item","toString","tracks","total","addTracksToPlaylist","id","track","uri","catch","error","handleName","handleDescription","handleNumber","number","parseInt","handleCollab","boolVal","handlePublic","convertToStrings","songs","songIds","Promise","resolve","reject","song","e","target","value","checked"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\n//Bootstrap\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\n//Component\r\nimport Selector from './Selector.js'\r\n\r\nfunction MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Modal heading\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Centered Modal</h4>\r\n          <p>\r\n            Cras mattis consectetur purus sit amet fermentum. Cras justo odio,\r\n            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac\r\n            consectetur ac, vestibulum at eros.\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\nfunction CustomPlaylistForm (props) {\r\n    const [selectorCount, setSelectorCount] = useState(0);\r\n    const [searchList, setSearchList] = useState([[],[],[]])\r\n    const [playlistName, setPlaylistName] = useState(\"Playlist\")\r\n    const [playlistDescription, setPlaylistDescription] = useState(\"\")\r\n    const [numberOfSongs, setNumberOfSongs] = useState(0)\r\n    const [isPublic, setIsPublic] = useState(false)\r\n    const [isCollab, setIsCollab] = useState(false)\r\n    const [searchRecs, setSearchRecs] = useState([])\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n\r\n    function handleSubmit () {\r\n        /*const testParams = {\r\n            limit: 1\r\n        }\r\n        props.spotify.search(searchList[0][0], [\"track\"], testParams)\r\n        .then((res) => {\r\n            console.log(\"test\")\r\n            console.log(res)\r\n        })*/\r\n        const recommendationParams = {\r\n            limit: numberOfSongs,\r\n            seed_artists: searchList[1].map((element) => element.split(';')[2]),\r\n            seed_genres: searchList[2].map((element) => element.split(';')[0]),\r\n            seed_tracks: searchList[0].map((element) => element.split(';')[2])\r\n        }\r\n        props.spotify.getRecommendations(recommendationParams)\r\n        .then((recommendations) => {\r\n            console.log(recommendations)\r\n            const playlistParams = {\r\n                name: playlistName,\r\n                public: isPublic,\r\n                collaborative: isCollab,\r\n                description: playlistDescription\r\n            }\r\n            props.spotify.createPlaylist(props.current, playlistParams)\r\n            .then(async (response) => {\r\n                await props.spotify.getUserPlaylists(props.current, playlistParams)\r\n                .then(playlists => {\r\n                  console.log(playlists)\r\n                  playlists.items.forEach(item => {\r\n                    console.log(item.name)\r\n                    if (item.name.toString() === playlistName && item.tracks.total === 0)\r\n                    {\r\n                        props.spotify.addTracksToPlaylist(item.id, recommendations.tracks.map((track) => track.uri))\r\n                    }\r\n                  })\r\n                })\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    function handleName (name) {\r\n        setPlaylistName(name);\r\n    }\r\n\r\n    function handleDescription (description) {\r\n        setPlaylistDescription(description);\r\n    }\r\n\r\n    function handleNumber (number) {\r\n        setNumberOfSongs(parseInt(number))\r\n    }\r\n\r\n    function handleCollab (boolVal) {\r\n        setIsCollab(boolVal);\r\n    }\r\n\r\n    function handlePublic (boolVal) {\r\n        setIsPublic(boolVal)\r\n    }\r\n\r\n    function convertToStrings(songs) {\r\n        let songIds = []\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n        songs.forEach(song => {\r\n\r\n        })\r\n        })\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <Form id=\"customForm\">\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Label class=\"formLabel\">Playlist Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Playlist\" onBlur={(e) => handleName(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <h4>Select Up To 5 Of The Following</h4>\r\n                    <ListGroup horizontal>\r\n                        <ListGroup.Item>\r\n                            <Selector   title=\"Song\" \r\n                                        spotify={props.spotify}\r\n                                        count={selectorCount} \r\n                                        setCount={setSelectorCount}\r\n                                        list={searchList}\r\n                                        setList={setSearchList}\r\n                                        recs={searchRecs}\r\n                                        setRecs={setSearchRecs}/>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Selector   title=\"Artist\"\r\n                                        spotify={props.spotify} \r\n                                        count={selectorCount} \r\n                                        setCount={setSelectorCount}\r\n                                        list={searchList}\r\n                                        setList={setSearchList}\r\n                                        recs={searchRecs}\r\n                                        setRecs={setSearchRecs}/>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Selector   title=\"Genre\" \r\n                                        spotify={props.spotify} \r\n                                        count={selectorCount} \r\n                                        setCount={setSelectorCount}\r\n                                        list={searchList}\r\n                                        setList={setSearchList}\r\n                                        recs={searchRecs}\r\n                                        setRecs={setSearchRecs}/>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Label class=\"formLabel\">Playlist Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Description\" onBlur={(e) => handleDescription(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Label class=\"formLabel\">Number Of Songs</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"1-100\" onBlur={(e) => handleNumber(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n                    Launch vertically centered modal\r\n                </Button>\r\n\r\n                <MyVerticallyCenteredModal\r\n                    show={modalShow}\r\n                    onHide={() => setModalShow(false)}\r\n                />\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Check label=\"Public Playlist\" onChange={(e) => handlePublic(e.target.checked)}/>\r\n                    <Form.Check label=\"Collaborative Playlist\" onChange={(e) => handleCollab(e.target.checked)}/>\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"button\" onClick={() => handleSubmit()}>\r\n                    Create Playlist\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomPlaylistForm;"]},"metadata":{},"sourceType":"module"}