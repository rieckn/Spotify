{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rieck\\\\Documents\\\\Coding\\\\Spotify\\\\client\\\\src\\\\Components\\\\CustomPlaylistForm.js\";\nimport React, { useState } from 'react'; //Bootstrap\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport ListGroup from 'react-bootstrap/ListGroup'; //Component\n\nimport Selector from './Selector.js';\n\nfunction CustomPlaylistForm(props) {\n  const [selectorCount, setSelectorCount] = useState(0);\n  const [searchList, setSearchList] = useState([[], [], []]);\n  const [playlistName, setPlaylistName] = useState(\"Playlist\");\n  const [playlistDescription, setPlaylistDescription] = useState(\"\");\n  const [numberOfSongs, setNumberOfSongs] = useState(0);\n  const [isPublic, setIsPublic] = useState(false);\n  const [isCollab, setIsCollab] = useState(false);\n  const [searchRecs, setSearchRecs] = useState([\"test\"]);\n\n  function handleSubmit() {\n    /*const testParams = {\r\n        limit: 1\r\n    }\r\n    props.spotify.search(searchList[0][0], [\"track\"], testParams)\r\n    .then((res) => {\r\n        console.log(\"test\")\r\n        console.log(res)\r\n    })*/\n    const recommendationParams = {\n      limit: numberOfSongs,\n      seed_artists: searchList[1] //seed_genres: searchList[2],\n      //seed_tracks: searchList[0]\n\n    };\n    props.spotify.getRecommendations(recommendationParams).then(recommendations => {\n      console.log(recommendations);\n      const playlistParams = {\n        name: playlistName,\n        public: isPublic,\n        collaborative: isCollab,\n        description: playlistDescription\n      };\n      props.spotify.createPlaylist(props.current, playlistParams).then(async response => {\n        await props.spotify.getUserPlaylists(props.current, playlistParams).then(playlists => {\n          console.log(playlists);\n          playlists.items.forEach(item => {\n            console.log(item.name);\n\n            if (item.name.toString() === playlistName && item.tracks.total === 0) {\n              props.spotify.addTracksToPlaylist(item.id);\n            }\n          });\n        });\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  function handleName(name) {\n    setPlaylistName(name);\n  }\n\n  function handleDescription(description) {\n    setPlaylistDescription(description);\n  }\n\n  function handleNumber(number) {\n    setNumberOfSongs(parseInt(number));\n  }\n\n  function handleCollab(boolVal) {\n    setIsCollab(boolVal);\n  }\n\n  function handlePublic(boolVal) {\n    setIsPublic(boolVal);\n  }\n\n  function convertToStrings(songs) {\n    let songIds = [];\n    return new Promise(function (resolve, reject) {\n      songs.forEach(song => {});\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    id: \"customForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    class: \"formLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Playlist Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Playlist\",\n    onBlur: e => handleName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Select Up To 5 Of The Following\"), /*#__PURE__*/React.createElement(ListGroup, {\n    horizontal: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    title: \"Song\",\n    spotify: props.spotify,\n    count: selectorCount,\n    setCount: setSelectorCount,\n    list: searchList,\n    setList: setSearchList,\n    recs: searchRecs,\n    setRecs: setSearchRecs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    title: \"Artist\",\n    spotify: props.spotify,\n    count: selectorCount,\n    setCount: setSelectorCount,\n    list: searchList,\n    setList: setSearchList,\n    recs: searchRecs,\n    setRecs: setSearchRecs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ListGroup.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    title: \"Genre\",\n    spotify: props.spotify,\n    count: selectorCount,\n    setCount: setSelectorCount,\n    list: searchList,\n    setList: setSearchList,\n    recs: searchRecs,\n    setRecs: setSearchRecs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    class: \"formLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 21\n    }\n  }, \"Playlist Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"textarea\",\n    rows: \"3\",\n    placeholder: \"Description\",\n    onBlur: e => handleDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    class: \"formLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, \"Number Of Songs\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"1-100\",\n    onBlur: e => handleNumber(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    class: \"formGroup\",\n    controlId: \"playlistName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, {\n    label: \"Public Playlist\",\n    onChange: e => handlePublic(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Form.Check, {\n    label: \"Collaborative Playlist\",\n    onChange: e => handleCollab(e.target.checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"button\",\n    onClick: () => handleSubmit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, \"Create Playlist\")));\n}\n\nexport default CustomPlaylistForm;","map":{"version":3,"sources":["C:/Users/rieck/Documents/Coding/Spotify/client/src/Components/CustomPlaylistForm.js"],"names":["React","useState","Button","Form","ListGroup","Selector","CustomPlaylistForm","props","selectorCount","setSelectorCount","searchList","setSearchList","playlistName","setPlaylistName","playlistDescription","setPlaylistDescription","numberOfSongs","setNumberOfSongs","isPublic","setIsPublic","isCollab","setIsCollab","searchRecs","setSearchRecs","handleSubmit","recommendationParams","limit","seed_artists","spotify","getRecommendations","then","recommendations","console","log","playlistParams","name","public","collaborative","description","createPlaylist","current","response","getUserPlaylists","playlists","items","forEach","item","toString","tracks","total","addTracksToPlaylist","id","catch","error","handleName","handleDescription","handleNumber","number","parseInt","handleCollab","boolVal","handlePublic","convertToStrings","songs","songIds","Promise","resolve","reject","song","e","target","value","checked"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\n\r\n//Bootstrap\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\n\r\n//Component\r\nimport Selector from './Selector.js'\r\n\r\nfunction CustomPlaylistForm (props) {\r\n    const [selectorCount, setSelectorCount] = useState(0);\r\n    const [searchList, setSearchList] = useState([[],[],[]])\r\n    const [playlistName, setPlaylistName] = useState(\"Playlist\")\r\n    const [playlistDescription, setPlaylistDescription] = useState(\"\")\r\n    const [numberOfSongs, setNumberOfSongs] = useState(0)\r\n    const [isPublic, setIsPublic] = useState(false)\r\n    const [isCollab, setIsCollab] = useState(false)\r\n    const [searchRecs, setSearchRecs] = useState([\"test\"])\r\n\r\n    function handleSubmit () {\r\n        /*const testParams = {\r\n            limit: 1\r\n        }\r\n        props.spotify.search(searchList[0][0], [\"track\"], testParams)\r\n        .then((res) => {\r\n            console.log(\"test\")\r\n            console.log(res)\r\n        })*/\r\n        const recommendationParams = {\r\n            limit: numberOfSongs,\r\n            seed_artists: searchList[1],\r\n            //seed_genres: searchList[2],\r\n            //seed_tracks: searchList[0]\r\n        }\r\n        props.spotify.getRecommendations(recommendationParams)\r\n        .then((recommendations) => {\r\n            console.log(recommendations)\r\n            const playlistParams = {\r\n                name: playlistName,\r\n                public: isPublic,\r\n                collaborative: isCollab,\r\n                description: playlistDescription\r\n            }\r\n            props.spotify.createPlaylist(props.current, playlistParams)\r\n            .then(async (response) => {\r\n                await props.spotify.getUserPlaylists(props.current, playlistParams)\r\n                .then(playlists => {\r\n                  console.log(playlists)\r\n                  playlists.items.forEach(item => {\r\n                    console.log(item.name)\r\n                    if (item.name.toString() === playlistName && item.tracks.total === 0)\r\n                    {\r\n\r\n                        props.spotify.addTracksToPlaylist(item.id, )\r\n                    }\r\n                  })\r\n                })\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    function handleName (name) {\r\n        setPlaylistName(name);\r\n    }\r\n\r\n    function handleDescription (description) {\r\n        setPlaylistDescription(description);\r\n    }\r\n\r\n    function handleNumber (number) {\r\n        setNumberOfSongs(parseInt(number))\r\n    }\r\n\r\n    function handleCollab (boolVal) {\r\n        setIsCollab(boolVal);\r\n    }\r\n\r\n    function handlePublic (boolVal) {\r\n        setIsPublic(boolVal)\r\n    }\r\n\r\n    function convertToStrings(songs) {\r\n        let songIds = []\r\n        return new Promise(function(resolve, reject)\r\n        {\r\n        songs.forEach(song => {\r\n\r\n        })\r\n        })\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <Form id=\"customForm\">\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Label class=\"formLabel\">Playlist Name</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Playlist\" onBlur={(e) => handleName(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <h4>Select Up To 5 Of The Following</h4>\r\n                    <ListGroup horizontal>\r\n                        <ListGroup.Item>\r\n                            <Selector   title=\"Song\" \r\n                                        spotify={props.spotify}\r\n                                        count={selectorCount} \r\n                                        setCount={setSelectorCount}\r\n                                        list={searchList}\r\n                                        setList={setSearchList}\r\n                                        recs={searchRecs}\r\n                                        setRecs={setSearchRecs}/>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Selector   title=\"Artist\"\r\n                                        spotify={props.spotify} \r\n                                        count={selectorCount} \r\n                                        setCount={setSelectorCount}\r\n                                        list={searchList}\r\n                                        setList={setSearchList}\r\n                                        recs={searchRecs}\r\n                                        setRecs={setSearchRecs}/>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Selector   title=\"Genre\" \r\n                                        spotify={props.spotify} \r\n                                        count={selectorCount} \r\n                                        setCount={setSelectorCount}\r\n                                        list={searchList}\r\n                                        setList={setSearchList}\r\n                                        recs={searchRecs}\r\n                                        setRecs={setSearchRecs}/>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Label class=\"formLabel\">Playlist Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Description\" onBlur={(e) => handleDescription(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Label class=\"formLabel\">Number Of Songs</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"1-100\" onBlur={(e) => handleNumber(e.target.value)}/>\r\n                </Form.Group>\r\n\r\n                <Form.Group class=\"formGroup\" controlId=\"playlistName\">\r\n                    <Form.Check label=\"Public Playlist\" onChange={(e) => handlePublic(e.target.checked)}/>\r\n                    <Form.Check label=\"Collaborative Playlist\" onChange={(e) => handleCollab(e.target.checked)}/>\r\n                </Form.Group>\r\n\r\n                <Button variant=\"primary\" type=\"button\" onClick={() => handleSubmit()}>\r\n                    Create Playlist\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomPlaylistForm;"]},"metadata":{},"sourceType":"module"}