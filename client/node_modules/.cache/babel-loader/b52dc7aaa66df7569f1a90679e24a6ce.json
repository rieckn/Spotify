{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rieck\\\\Documents\\\\Coding\\\\Spotify\\\\client\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction App() {\n  const spotifyApi = new SpotifyWebApi();\n  const params = getHashParams();\n  const token = params.access_token;\n\n  if (token) {\n    spotifyApi.setAccessToken(token);\n  }\n\n  const [loggedIn, setLoggedIn] = useState(token ? true : false);\n  const [name, setName] = useState(\"Not Checked\");\n  const [albumArt, setAlbumArt] = useState(\"\");\n  const [topTracks, setTopTracks] = useState([]);\n\n  function getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  function getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      setName(response.item.name);\n      setAlbumArt(response.item.album.images[0].url);\n    });\n  }\n\n  function getTopTracks() {\n    const topOptions = {\n      limit: 50\n    };\n    let newPlaylistId = \"\";\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    };\n    spotifyApi.createPlaylist(params.current_user, options).then(async () => {\n      let i = 0;\n\n      while (newPlaylistId === \"\" && i < 10) {\n        let playlistOptions = {\n          limit: 50,\n          offset: i * 50\n        };\n        i++;\n        await spotifyApi.getUserPlaylists(params.current_user, playlistOptions).then(playlists => {\n          console.log(playlists);\n          playlists.items.forEach(item => {\n            console.log(item.name);\n\n            if (item.name.toString() === \"Generated Playlist\" && item.tracks.total === 0) {\n              newPlaylistId = item.id;\n              console.log(item.id);\n            }\n          });\n        });\n        console.log(newPlaylistId);\n      }\n\n      spotifyApi.getMyTopTracks(topOptions).then(response => {\n        console.log(response.items[0].id);\n        setTopTracks(response.items);\n        let i = 0;\n\n        for (i; i < 50; i += 5) {\n          const tracks = {\n            limit: 20,\n            seed_tracks: [response.items[i].id, response.items[i + 1].id, response.items[i + 2].id, response.items[i + 3].id, response.items[i + 4].id]\n          };\n          spotifyApi.getRecommendations(tracks).then(recommendations => {\n            console.log(recommendations);\n            let trackNames = [];\n            recommendations.tracks.forEach(element => {\n              trackNames.push(element.id.toString());\n            });\n            spotifyApi.containsMySavedTracks(trackNames).then(isSaved => {\n              let tracksToAdd = [];\n              console.log(isSaved);\n              let newTracks = 0;\n              isSaved.forEach(element => {\n                if (!element && newTracks < 5) {\n                  newTracks++;\n                }\n              });\n            }).catch(error => {\n              console.log(error);\n            });\n          });\n        }\n      });\n    });\n    console.log(topTracks[0]);\n  }\n\n  function getSimilarTrack() {\n    getTopTracks();\n  }\n\n  function createPlaylist() {\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    };\n    spotifyApi.createPlaylist(params.current_user, options);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"http://localhost:8888\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \" Login to Spotify \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Now Playing: \", name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: albumArt,\n    style: {\n      height: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  })), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getNowPlaying(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, \"Check Now Playing\"), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getSimilarTrack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, \"Similar Track\"), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => createPlaylist(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"Create Playlist\"));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/rieck/Documents/Coding/Spotify/client/src/App.js"],"names":["React","useState","SpotifyWebApi","App","spotifyApi","params","getHashParams","token","access_token","setAccessToken","loggedIn","setLoggedIn","name","setName","albumArt","setAlbumArt","topTracks","setTopTracks","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","item","album","images","url","getTopTracks","topOptions","limit","newPlaylistId","options","public","createPlaylist","current_user","i","playlistOptions","offset","getUserPlaylists","playlists","console","log","items","forEach","toString","tracks","total","id","getMyTopTracks","seed_tracks","getRecommendations","recommendations","trackNames","element","push","containsMySavedTracks","isSaved","tracksToAdd","newTracks","catch","error","getSimilarTrack","height"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const spotifyApi = new SpotifyWebApi();\n  const params = getHashParams()\n  const token = params.access_token;\n  if (token) {\n    spotifyApi.setAccessToken(token);\n  }\n  \n  const [loggedIn, setLoggedIn] = useState(token ? true : false);\n  const [name, setName] = useState(\"Not Checked\");\n  const [albumArt, setAlbumArt] = useState(\"\");\n  const [topTracks, setTopTracks] = useState([]);\n  \n  function getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  function getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n              setName(response.item.name) \n              setAlbumArt(response.item.album.images[0].url)\n            }\n        );\n  }\n\n  function getTopTracks() {\n    const topOptions = {\n      limit: 50\n    }\n    let newPlaylistId = \"\";\n\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    }\n    spotifyApi.createPlaylist(params.current_user, options)\n    .then(async () => {\n      let i = 0;\n      while (newPlaylistId === \"\" && i < 10)\n      {\n        let playlistOptions = {\n          limit: 50,\n          offset: i*50 \n        }\n        i++;\n        await spotifyApi.getUserPlaylists(params.current_user, playlistOptions)\n        .then(playlists => {\n          console.log(playlists)\n          playlists.items.forEach(item => {\n            console.log(item.name)\n            if (item.name.toString() === \"Generated Playlist\" && item.tracks.total === 0)\n            {\n              newPlaylistId = item.id;\n              console.log(item.id)\n            }\n          })\n\n        })\n        console.log(newPlaylistId)\n      }\n    spotifyApi.getMyTopTracks(topOptions)\n      .then((response) => {\n        console.log(response.items[0].id)\n        setTopTracks(response.items)\n        let i = 0;\n        for (i; i < 50; i += 5)\n        {\n          const tracks = {\n            limit: 20,\n            seed_tracks: [response.items[i].id, response.items[i + 1].id, response.items[i + 2].id, response.items[i + 3].id, response.items[i + 4].id]\n          }\n          spotifyApi.getRecommendations(tracks)\n          .then((recommendations) => {\n            console.log(recommendations)\n            let trackNames = []\n\n            recommendations.tracks.forEach((element) => {\n              trackNames.push(element.id.toString())\n            })\n\n            spotifyApi.containsMySavedTracks(trackNames)\n            .then(isSaved => {\n              let tracksToAdd = []\n              console.log(isSaved)\n              let newTracks = 0;\n              isSaved.forEach((element) => {\n                if (!element && newTracks < 5)\n                {\n                  newTracks++;\n                }\n              })\n            })\n            .catch(error => {\n              console.log(error)\n            })\n          })\n        }\n      })\n    })\n\n    console.log(topTracks[0])\n  }\n\n  function getSimilarTrack() {\n    getTopTracks()\n  }\n\n  function createPlaylist() {\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    }\n    spotifyApi.createPlaylist(params.current_user, options)\n  }\n  return (\n    <div className=\"App\">\n      <a href='http://localhost:8888' > Login to Spotify </a>\n      <div>\n        Now Playing: {name}\n      </div>\n      <div>\n        <img src={albumArt} style={{ height: 150 }}/>\n      </div>\n      {loggedIn &&\n        <button onClick={() => getNowPlaying()}>\n          Check Now Playing\n        </button>\n      }\n      {loggedIn &&\n        <button onClick={() => getSimilarTrack()}>\n          Similar Track\n        </button>\n      }\n      {loggedIn &&\n        <button onClick={() => createPlaylist()}>\n          Create Playlist\n        </button>\n      }      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}