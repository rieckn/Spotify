{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rieck\\\\Documents\\\\Coding\\\\Spotify\\\\client\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport './App.css';\n\nfunction App() {\n  const spotifyApi = new SpotifyWebApi();\n  const params = getHashParams();\n  const token = params.access_token;\n\n  if (token) {\n    spotifyApi.setAccessToken(token);\n  }\n\n  const loggedIn = useState(token ? true : false);\n  const [topTracks, setTopTracks] = useState([]);\n\n  function getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  function getTopTracks() {\n    const topOptions = {\n      limit: 50\n    };\n    let newPlaylistId = \"\";\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    };\n    spotifyApi.createPlaylist(params.current_user, options).then(async () => {\n      let i = 0;\n\n      while (newPlaylistId === \"\") {\n        let playlistOptions = {\n          limit: 50,\n          offset: i * 50\n        };\n        i++;\n        await spotifyApi.getUserPlaylists(params.current_user, playlistOptions).then(playlists => {\n          console.log(playlists);\n          playlists.items.forEach(item => {\n            console.log(item.name);\n\n            if (item.name.toString() === \"Generated Playlist\" && item.tracks.total === 0) {\n              newPlaylistId = item.id;\n              console.log(item.id);\n            }\n          });\n        });\n        console.log(newPlaylistId);\n      }\n\n      spotifyApi.getMyTopTracks(topOptions).then(async response => {\n        console.log(response.items[0].id);\n        setTopTracks(response.items);\n        let i = 0;\n        let tracksToAdd = [];\n\n        for (i; i < 50; i += 5) {\n          const tracks = {\n            limit: 20,\n            seed_tracks: [response.items[i].id, response.items[i + 1].id, response.items[i + 2].id, response.items[i + 3].id, response.items[i + 4].id]\n          };\n          await spotifyApi.getRecommendations(tracks).then(async recommendations => {\n            console.log(recommendations);\n            let trackNames = [];\n            await recommendations.tracks.forEach(element => {\n              trackNames.push(element.id.toString());\n            });\n            await spotifyApi.containsMySavedTracks(trackNames).then(isSaved => {\n              console.log(isSaved);\n              let newTracks = 0;\n              let i = 0;\n\n              for (i; i < isSaved.length; i++) {\n                if (!isSaved[i] && newTracks < 5 && !tracksToAdd.includes(recommendations.tracks[i].uri)) {\n                  tracksToAdd.push(recommendations.tracks[i].uri);\n                  newTracks++;\n                }\n              }\n            }).catch(error => {\n              console.log(error);\n            });\n          });\n        }\n\n        await spotifyApi.addTracksToPlaylist(newPlaylistId, tracksToAdd).catch(error => {\n          console.log(error);\n        });\n      });\n    });\n    console.log(topTracks[0]);\n  }\n\n  function getSimilarTrack() {\n    getTopTracks();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    href: \"http://localhost:8888\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \" Login to Spotify \"), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getSimilarTrack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Create Playlist\"));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/rieck/Documents/Coding/Spotify/client/src/App.js"],"names":["React","useState","SpotifyWebApi","App","spotifyApi","params","getHashParams","token","access_token","setAccessToken","loggedIn","topTracks","setTopTracks","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getTopTracks","topOptions","limit","newPlaylistId","options","public","name","createPlaylist","current_user","then","i","playlistOptions","offset","getUserPlaylists","playlists","console","log","items","forEach","item","toString","tracks","total","id","getMyTopTracks","response","tracksToAdd","seed_tracks","getRecommendations","recommendations","trackNames","element","push","containsMySavedTracks","isSaved","newTracks","length","includes","uri","catch","error","addTracksToPlaylist","getSimilarTrack"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport './App.css';\n\nfunction App() {\n  const spotifyApi = new SpotifyWebApi();\n  const params = getHashParams()\n  const token = params.access_token;\n  if (token) {\n    spotifyApi.setAccessToken(token);\n  }\n  \n  const loggedIn = useState(token ? true : false);\n  const [topTracks, setTopTracks] = useState([]);\n  \n  function getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  function getTopTracks() {\n    const topOptions = {\n      limit: 50\n    }\n    let newPlaylistId = \"\";\n\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    }\n    spotifyApi.createPlaylist(params.current_user, options)\n    .then(async () => {\n      let i = 0;\n      while (newPlaylistId === \"\")\n      {\n        let playlistOptions = {\n          limit: 50,\n          offset: i*50 \n        }\n        i++;\n        await spotifyApi.getUserPlaylists(params.current_user, playlistOptions)\n        .then(playlists => {\n          console.log(playlists)\n          playlists.items.forEach(item => {\n            console.log(item.name)\n            if (item.name.toString() === \"Generated Playlist\" && item.tracks.total === 0)\n            {\n              newPlaylistId = item.id;\n              console.log(item.id)\n            }\n          })\n\n        })\n        console.log(newPlaylistId)\n      }\n    spotifyApi.getMyTopTracks(topOptions)\n      .then(async (response) => {\n        console.log(response.items[0].id)\n        setTopTracks(response.items)\n        let i = 0;\n        let tracksToAdd = [];\n        for (i; i < 50; i += 5)\n        {\n          const tracks = {\n            limit: 20,\n            seed_tracks: [response.items[i].id, response.items[i + 1].id, response.items[i + 2].id, response.items[i + 3].id, response.items[i + 4].id]\n          }\n          await spotifyApi.getRecommendations(tracks)\n          .then(async (recommendations) => {\n            console.log(recommendations)\n            let trackNames = []\n\n            await recommendations.tracks.forEach((element) => {\n              trackNames.push(element.id.toString())\n            })\n\n            await spotifyApi.containsMySavedTracks(trackNames)\n            .then((isSaved) => {\n              console.log(isSaved)\n              let newTracks = 0;\n              let i = 0;\n              for (i; i < isSaved.length; i++) {\n                if (!isSaved[i] && newTracks < 5 && !tracksToAdd.includes(recommendations.tracks[i].uri))\n                {\n                  tracksToAdd.push(recommendations.tracks[i].uri)\n                  newTracks++;\n                }\n              }\n            })\n            .catch(error => {\n              console.log(error)\n            })\n          })\n        }\n        await spotifyApi.addTracksToPlaylist(newPlaylistId, tracksToAdd)\n        .catch(error => {\n          console.log(error)\n        })\n      })\n    })\n\n    console.log(topTracks[0])\n  }\n\n  function getSimilarTrack() {\n    getTopTracks()\n  }\n  return (\n    <div className=\"App\">\n      <button href='http://localhost:8888' > Login to Spotify </button>\n      {loggedIn &&\n        <button onClick={() => getSimilarTrack()}>\n          Create Playlist\n        </button>\n      }      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}