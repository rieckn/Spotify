{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rieck\\\\Documents\\\\Coding\\\\Spotify\\\\client\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction App() {\n  const spotifyApi = new SpotifyWebApi();\n  const params = getHashParams();\n  const token = params.access_token;\n\n  if (token) {\n    spotifyApi.setAccessToken(token);\n  }\n\n  const [loggedIn, setLoggedIn] = useState(token ? true : false);\n  const [name, setName] = useState(\"Not Checked\");\n  const [albumArt, setAlbumArt] = useState(\"\");\n  const [topTracks, setTopTracks] = useState([]);\n\n  function getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  function getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState().then(response => {\n      setName(response.item.name);\n      setAlbumArt(response.item.album.images[0].url);\n    });\n  }\n\n  function getTopTracks() {\n    const topOptions = {\n      limit: 50\n    };\n    spotifyApi.getMyTopTracks(topOptions).then(response => {\n      console.log(response.items[0].id);\n      setTopTracks(response.items);\n      let i = 0;\n\n      for (i; i < 50; i += 5) {\n        const tracks = {\n          limit: 20,\n          seed_tracks: [response.items[i].id, response.items[i + 1].id, response.items[i + 2].id, response.items[i + 3].id, response.items[i + 4].id]\n        };\n        spotifyApi.getRecommendations(tracks).then(recommendations => {\n          console.log(recommendations);\n          let trackNames = [];\n          recommendations.tracks.forEach(element => {\n            trackNames.push(element.id.toString());\n          });\n          spotifyApi.containsMySavedTracks(trackNames).then(isSaved => {\n            console.log(isSaved);\n            let newTracks = 0;\n            isSaved.forEach(element => {\n              if (!element && newTracks < 5) {\n                newTracks++;\n              }\n            });\n          }).catch(error => {\n            console.log(error);\n          });\n        });\n      }\n    });\n    console.log(topTracks[0]);\n  }\n\n  function getSimilarTrack() {\n    getTopTracks();\n  }\n\n  function createPlaylist() {\n    console.log(token);\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    };\n    console.log(params);\n    spotifyApi.createPlaylist(params.current_user, options);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"http://localhost:8888\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, \" Login to Spotify \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"Now Playing: \", name), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: albumArt,\n    style: {\n      height: 150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  })), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getNowPlaying(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, \"Check Now Playing\"), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getSimilarTrack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, \"Similar Track\"), loggedIn && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => createPlaylist(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Create Playlist\"));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/rieck/Documents/Coding/Spotify/client/src/App.js"],"names":["React","useState","SpotifyWebApi","App","spotifyApi","params","getHashParams","token","access_token","setAccessToken","loggedIn","setLoggedIn","name","setName","albumArt","setAlbumArt","topTracks","setTopTracks","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getNowPlaying","getMyCurrentPlaybackState","then","response","item","album","images","url","getTopTracks","topOptions","limit","getMyTopTracks","console","log","items","id","i","tracks","seed_tracks","getRecommendations","recommendations","trackNames","forEach","element","push","toString","containsMySavedTracks","isSaved","newTracks","catch","error","getSimilarTrack","createPlaylist","options","public","current_user","height"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const spotifyApi = new SpotifyWebApi();\n  const params = getHashParams()\n  const token = params.access_token;\n  if (token) {\n    spotifyApi.setAccessToken(token);\n  }\n  \n  const [loggedIn, setLoggedIn] = useState(token ? true : false);\n  const [name, setName] = useState(\"Not Checked\");\n  const [albumArt, setAlbumArt] = useState(\"\");\n  const [topTracks, setTopTracks] = useState([]);\n  \n  function getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n       e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  function getNowPlaying() {\n    spotifyApi.getMyCurrentPlaybackState()\n      .then((response) => {\n              setName(response.item.name) \n              setAlbumArt(response.item.album.images[0].url)\n            }\n        );\n  }\n\n  function getTopTracks() {\n    const topOptions = {\n      limit: 50\n    }\n    spotifyApi.getMyTopTracks(topOptions)\n      .then((response) => {\n        console.log(response.items[0].id)\n        setTopTracks(response.items)\n        let i = 0;\n        for (i; i < 50; i += 5)\n        {\n          const tracks = {\n            limit: 20,\n            seed_tracks: [response.items[i].id, response.items[i + 1].id, response.items[i + 2].id, response.items[i + 3].id, response.items[i + 4].id]\n          }\n          spotifyApi.getRecommendations(tracks)\n          .then((recommendations) => {\n            console.log(recommendations)\n            let trackNames = []\n\n            recommendations.tracks.forEach((element) => {\n              trackNames.push(element.id.toString())\n            })\n\n            spotifyApi.containsMySavedTracks(trackNames)\n            .then(isSaved => {\n              console.log(isSaved)\n              let newTracks = 0;\n              isSaved.forEach((element) => {\n                if (!element && newTracks < 5)\n                {\n                  newTracks++;\n                }\n              })\n            })\n            .catch(error => {\n              console.log(error)\n            })\n\n          })\n        }\n      })\n      console.log(topTracks[0])\n  }\n\n  function getSimilarTrack() {\n    getTopTracks()\n  }\n\n  function createPlaylist() {\n    console.log(token)\n    const options = {\n      public: false,\n      name: \"Generated Playlist\"\n    }\n    console.log(params)\n    spotifyApi.createPlaylist(params.current_user, options)\n  }\n  return (\n    <div className=\"App\">\n      <a href='http://localhost:8888' > Login to Spotify </a>\n      <div>\n        Now Playing: {name}\n      </div>\n      <div>\n        <img src={albumArt} style={{ height: 150 }}/>\n      </div>\n      {loggedIn &&\n        <button onClick={() => getNowPlaying()}>\n          Check Now Playing\n        </button>\n      }\n      {loggedIn &&\n        <button onClick={() => getSimilarTrack()}>\n          Similar Track\n        </button>\n      }\n      {loggedIn &&\n        <button onClick={() => createPlaylist()}>\n          Create Playlist\n        </button>\n      }      \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}