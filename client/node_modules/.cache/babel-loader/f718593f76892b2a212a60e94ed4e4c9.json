{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rieck\\\\Documents\\\\Coding\\\\Spotify\\\\client\\\\src\\\\Components\\\\Selector.js\";\nimport React, { useState } from 'react';\nimport $ from 'jquery'; //Bootstrap\n\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Form from 'react-bootstrap/Form';\nimport ListGroupItem from 'react-bootstrap/esm/ListGroupItem';\n\nfunction Selector(props) {\n  const [elements, setElements] = useState([]);\n\n  function addElement() {\n    setElements(elements.concat([\"\"]));\n    props.setCount(props.count + 1);\n  }\n\n  function changePlaceholder(newPlaceholder, index, id) {\n    let newElements = [...elements];\n    newElements[index] = newPlaceholder + \";false;\" + id;\n    setElements(newElements);\n    setList(newElements);\n    props.setRecs([]);\n  }\n\n  function removeElement(index) {\n    let newElements = [...elements];\n    newElements.splice(index, 1);\n    setElements(newElements);\n    setList(newElements);\n    props.setCount(props.count - 1);\n    props.setRecs([]);\n  }\n\n  function changeValue(value, index, id) {\n    let newElements = [...elements];\n    newElements[index] = value + \";true;\" + id;\n    setElements(newElements);\n    searchRecommendations(value);\n  }\n\n  function setList(newElements) {\n    let newList = [...props.list];\n\n    if (props.title === \"Song\") {\n      newList[0] = newElements;\n      props.setList(newList);\n    } else if (props.title === \"Artist\") {\n      newList[1] = newElements;\n      props.setList(newList);\n    } else if (props.title === \"Genre\") {\n      newList[2] = newElements;\n      props.setList(newList);\n    }\n  }\n\n  function setFocus(value, index, id) {\n    let newElements = [...elements];\n    newElements[index] = value + \";true;\" + id;\n    setElements(newElements);\n    searchRecommendations(value);\n  }\n\n  function returnValue(element) {\n    if (element !== \"\") {\n      return element.split(';')[0];\n    } else return element;\n  }\n\n  function checkId(element) {\n    if (element.split(';').length = 3) {\n      return element.split(';')[2];\n    }\n  }\n\n  function displayElements() {\n    return elements.map((element, index) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      class: \"form-control\",\n      placeholder: props.title + \" name\",\n      value: returnValue(element),\n      \"aria-label\": \"Recipient's username\",\n      \"aria-describedby\": \"basic-addon2\",\n      onChange: e => changeValue(e.target.value, index, checkId(element)),\n      onBlur: e => changePlaceholder(e.target.value, index, checkId(element)),\n      onFocus: (e => setFocus(e.target.value, index), checkId(element)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"input-group-append\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      class: \"btn btn-outline-secondary\",\n      type: \"button\",\n      onClick: () => removeElement(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, \"X\"))), !(element === \"\" || element.split(';')[1] === \"false\") && /*#__PURE__*/React.createElement(ListGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, searchRecs(index))));\n  }\n\n  function searchRecs(index) {\n    if (props.recs !== []) {\n      return props.recs.map(element => /*#__PURE__*/React.createElement(ListGroupItem, {\n        bsPrefix: \"rec-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        onClick: () => changeValue(element.split(';')[0], index, element.split(';')[1]),\n        onMouseDown: e => e.preventDefault(),\n        bsPrefix: \"rec-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }, element.split(';').length >= 3 && /*#__PURE__*/React.createElement(\"img\", {\n        class: \"albumImage\",\n        src: element.split(';')[2],\n        width: \"40px\",\n        height: \"40px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"t\", {\n        class: \"nameText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 33\n        }\n      }, element.split(\" By: \")[0].split(';')[0]), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 33\n        }\n      }), element.split(\" By: \").length > 1 && /*#__PURE__*/React.createElement(\"t\", {\n        class: \"artistText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 33\n        }\n      }, \"Artist: \" + element.split(\" By: \")[1].split(';')[0]))));\n    }\n  }\n\n  function searchRecommendations(searchVal) {\n    if (searchVal !== \"\") {\n      let resultArray = [];\n\n      if (props.title === \"Song\") {\n        const testParams = {\n          limit: 5\n        };\n        props.spotify.search(searchVal, [\"track\"], testParams).then(response => {\n          console.log(response);\n          response.tracks.items.map((item, index) => {\n            resultArray.push(item.name + \" By: \" + item.artists[0].name + \";\" + item.id + \";\" + (item.album.images !== null ? item.album.images[0].url : \"\"));\n          });\n          props.setRecs(resultArray);\n        });\n      } else if (props.title === \"Artist\") {\n        const testParams = {\n          limit: 5\n        };\n        props.spotify.search(searchVal, [\"artist\"], testParams).then(response => {\n          console.log(response);\n          response.artists.items.map((item, index) => {\n            resultArray.push(item.name + ';' + item.id + ';' + (item.images !== null ? item.images[0].url : \"\"));\n          });\n          props.setRecs(resultArray);\n        });\n      } else if (props.title === \"Genre\") {\n        props.spotify.getAvailableGenreSeeds().then(response => {\n          let genres = response.genres.filter(genre => genre.includes(searchVal));\n\n          if (genres.length > 5) {\n            props.setRecs(genres.slice(0, 5));\n          } else props.setRecs(genres);\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    class: \"selectorLabel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, props.title + 's'), displayElements(), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }), props.count < 5 && /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    class: \"btn btn-default btn-circle btn-lg\",\n    onClick: () => addElement(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, \"+\"));\n}\n\nexport default Selector;","map":{"version":3,"sources":["C:/Users/rieck/Documents/Coding/Spotify/client/src/Components/Selector.js"],"names":["React","useState","$","Button","ListGroup","Form","ListGroupItem","Selector","props","elements","setElements","addElement","concat","setCount","count","changePlaceholder","newPlaceholder","index","id","newElements","setList","setRecs","removeElement","splice","changeValue","value","searchRecommendations","newList","list","title","setFocus","returnValue","element","split","checkId","length","displayElements","map","e","target","searchRecs","recs","preventDefault","searchVal","resultArray","testParams","limit","spotify","search","then","response","console","log","tracks","items","item","push","name","artists","album","images","url","getAvailableGenreSeeds","genres","filter","genre","includes","slice"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,CAAP,MAAc,QAAd,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;;AAEA,SAASC,QAAT,CAAmBC,KAAnB,EAA0B;AACtB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;;AAEA,WAASU,UAAT,GAAuB;AACnBD,IAAAA,WAAW,CAACD,QAAQ,CAACG,MAAT,CAAgB,CAAC,EAAD,CAAhB,CAAD,CAAX;AACAJ,IAAAA,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,KAAN,GAAc,CAA7B;AACH;;AAED,WAASC,iBAAT,CAA4BC,cAA5B,EAA4CC,KAA5C,EAAmDC,EAAnD,EAAuD;AACnD,QAAIC,WAAW,GAAG,CAAC,GAAGV,QAAJ,CAAlB;AACAU,IAAAA,WAAW,CAACF,KAAD,CAAX,GAAqBD,cAAc,GAAG,SAAjB,GAA6BE,EAAlD;AACAR,IAAAA,WAAW,CAACS,WAAD,CAAX;AACAC,IAAAA,OAAO,CAACD,WAAD,CAAP;AACAX,IAAAA,KAAK,CAACa,OAAN,CAAc,EAAd;AACH;;AAED,WAASC,aAAT,CAAwBL,KAAxB,EAA+B;AAC3B,QAAIE,WAAW,GAAG,CAAC,GAAGV,QAAJ,CAAlB;AACAU,IAAAA,WAAW,CAACI,MAAZ,CAAmBN,KAAnB,EAAyB,CAAzB;AACAP,IAAAA,WAAW,CAACS,WAAD,CAAX;AACAC,IAAAA,OAAO,CAACD,WAAD,CAAP;AACAX,IAAAA,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,KAAN,GAAc,CAA7B;AACAN,IAAAA,KAAK,CAACa,OAAN,CAAc,EAAd;AACH;;AAED,WAASG,WAAT,CAAsBC,KAAtB,EAA6BR,KAA7B,EAAoCC,EAApC,EAAwC;AACpC,QAAIC,WAAW,GAAG,CAAC,GAAGV,QAAJ,CAAlB;AACAU,IAAAA,WAAW,CAACF,KAAD,CAAX,GAAqBQ,KAAK,GAAG,QAAR,GAAmBP,EAAxC;AACAR,IAAAA,WAAW,CAACS,WAAD,CAAX;AACAO,IAAAA,qBAAqB,CAACD,KAAD,CAArB;AACH;;AAED,WAASL,OAAT,CAAkBD,WAAlB,EAA+B;AAC3B,QAAIQ,OAAO,GAAG,CAAC,GAAGnB,KAAK,CAACoB,IAAV,CAAd;;AACA,QAAIpB,KAAK,CAACqB,KAAN,KAAgB,MAApB,EAA4B;AACxBF,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaR,WAAb;AACAX,MAAAA,KAAK,CAACY,OAAN,CAAcO,OAAd;AACH,KAHD,MAIK,IAAInB,KAAK,CAACqB,KAAN,KAAgB,QAApB,EAA8B;AAC/BF,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaR,WAAb;AACAX,MAAAA,KAAK,CAACY,OAAN,CAAcO,OAAd;AACH,KAHI,MAIA,IAAInB,KAAK,CAACqB,KAAN,KAAgB,OAApB,EAA6B;AAC9BF,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAaR,WAAb;AACAX,MAAAA,KAAK,CAACY,OAAN,CAAcO,OAAd;AACH;AACJ;;AAED,WAASG,QAAT,CAAmBL,KAAnB,EAA0BR,KAA1B,EAAiCC,EAAjC,EAAqC;AACjC,QAAIC,WAAW,GAAG,CAAC,GAAGV,QAAJ,CAAlB;AACAU,IAAAA,WAAW,CAACF,KAAD,CAAX,GAAqBQ,KAAK,GAAG,QAAR,GAAmBP,EAAxC;AACAR,IAAAA,WAAW,CAACS,WAAD,CAAX;AACAO,IAAAA,qBAAqB,CAACD,KAAD,CAArB;AACH;;AAED,WAASM,WAAT,CAAsBC,OAAtB,EAA+B;AAC3B,QAAIA,OAAO,KAAK,EAAhB,EACA;AACI,aAAOA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAP;AACH,KAHD,MAIK,OAAOD,OAAP;AACR;;AAED,WAASE,OAAT,CAAkBF,OAAlB,EAA2B;AACvB,QAAIA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmBE,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,aAAOH,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAP;AACH;AACJ;;AAED,WAASG,eAAT,GAA2B;AACvB,WACI3B,QAAQ,CAAC4B,GAAT,CAAa,CAACL,OAAD,EAAUf,KAAV,kBACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,IAAI,EAAC,MAAb;AACQ,MAAA,KAAK,EAAC,cADd;AAEQ,MAAA,WAAW,EAAET,KAAK,CAACqB,KAAN,GAAc,OAFnC;AAGQ,MAAA,KAAK,EAAEE,WAAW,CAACC,OAAD,CAH1B;AAIQ,oBAAW,sBAJnB;AAKQ,0BAAiB,cALzB;AAMQ,MAAA,QAAQ,EAAEM,CAAC,IAAId,WAAW,CAACc,CAAC,CAACC,MAAF,CAASd,KAAV,EAAiBR,KAAjB,EAAwBiB,OAAO,CAACF,OAAD,CAA/B,CANlC;AAOQ,MAAA,MAAM,EAAGM,CAAD,IAAOvB,iBAAiB,CAACuB,CAAC,CAACC,MAAF,CAASd,KAAV,EAAiBR,KAAjB,EAAwBiB,OAAO,CAACF,OAAD,CAA/B,CAPxC;AAQQ,MAAA,OAAO,GAAGM,CAAD,IAAOR,QAAQ,CAACQ,CAAC,CAACC,MAAF,CAASd,KAAV,EAAiBR,KAAjB,CAAf,EAAwCiB,OAAO,CAACF,OAAD,CAAjD,CARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAUI;AAAK,MAAA,KAAK,EAAC,oBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,KAAK,EAAC,2BAAd;AAA0C,MAAA,IAAI,EAAC,QAA/C;AAAwD,MAAA,OAAO,EAAE,MAAMV,aAAa,CAACL,KAAD,CAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAVJ,CADJ,EAeM,EAAEe,OAAO,KAAK,EAAZ,IAAkBA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,MAA0B,OAA9C,kBACF,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKO,UAAU,CAACvB,KAAD,CADf,CAhBJ,CADJ,CADJ;AAyBH;;AAED,WAASuB,UAAT,CAAoBvB,KAApB,EAA2B;AACvB,QAAIT,KAAK,CAACiC,IAAN,KAAe,EAAnB,EACA;AACI,aACIjC,KAAK,CAACiC,IAAN,CAAWJ,GAAX,CAAgBL,OAAD,iBACX,oBAAC,aAAD;AAAe,QAAA,QAAQ,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AACQ,QAAA,OAAO,EAAE,MAAMR,WAAW,CAACQ,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,EAAwBhB,KAAxB,EAA+Be,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAA/B,CADlC;AAEQ,QAAA,WAAW,EAAGK,CAAD,IAAOA,CAAC,CAACI,cAAF,EAF5B;AAGQ,QAAA,QAAQ,EAAC,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKQV,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmBE,MAAnB,IAA6B,CAA7B,iBACA;AAAK,QAAA,KAAK,EAAC,YAAX;AAAwB,QAAA,GAAG,EAAEH,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAA7B;AAAoD,QAAA,KAAK,EAAC,MAA1D;AAAiE,QAAA,MAAM,EAAC,MAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANR,eAQQ;AAAG,QAAA,KAAK,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBD,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAArB,CARR,eASQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATR,EAWQD,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBE,MAAvB,GAAgC,CAAhC,iBACA;AAAG,QAAA,KAAK,EAAC,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuB,aAAaH,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAApC,CAZR,CADJ,CADJ,CADJ;AAqBH;AACJ;;AAED,WAASP,qBAAT,CAA+BiB,SAA/B,EAA0C;AACtC,QAAIA,SAAS,KAAK,EAAlB,EAAsB;AAClB,UAAIC,WAAW,GAAG,EAAlB;;AACA,UAAIpC,KAAK,CAACqB,KAAN,KAAgB,MAApB,EACA;AACI,cAAMgB,UAAU,GAAG;AACfC,UAAAA,KAAK,EAAE;AADQ,SAAnB;AAGAtC,QAAAA,KAAK,CAACuC,OAAN,CAAcC,MAAd,CAAqBL,SAArB,EAAgC,CAAC,OAAD,CAAhC,EAA2CE,UAA3C,EACCI,IADD,CACOC,QAAD,IAAc;AAChBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAA,UAAAA,QAAQ,CAACG,MAAT,CAAgBC,KAAhB,CAAsBjB,GAAtB,CAA0B,CAACkB,IAAD,EAAOtC,KAAP,KAAiB;AACvC2B,YAAAA,WAAW,CAACY,IAAZ,CAAiBD,IAAI,CAACE,IAAL,GAAY,OAAZ,GAAsBF,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgBD,IAAtC,GAA6C,GAA7C,GAAmDF,IAAI,CAACrC,EAAxD,GAA6D,GAA7D,IAAoEqC,IAAI,CAACI,KAAL,CAAWC,MAAX,KAAsB,IAAtB,GAA6BL,IAAI,CAACI,KAAL,CAAWC,MAAX,CAAkB,CAAlB,EAAqBC,GAAlD,GAAwD,EAA5H,CAAjB;AACH,WAFD;AAGArD,UAAAA,KAAK,CAACa,OAAN,CAAcuB,WAAd;AACH,SAPD;AAQH,OAbD,MAcK,IAAIpC,KAAK,CAACqB,KAAN,KAAgB,QAApB,EACL;AACI,cAAMgB,UAAU,GAAG;AACfC,UAAAA,KAAK,EAAE;AADQ,SAAnB;AAGAtC,QAAAA,KAAK,CAACuC,OAAN,CAAcC,MAAd,CAAqBL,SAArB,EAAgC,CAAC,QAAD,CAAhC,EAA4CE,UAA5C,EACCI,IADD,CACOC,QAAD,IAAc;AAChBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAA,UAAAA,QAAQ,CAACQ,OAAT,CAAiBJ,KAAjB,CAAuBjB,GAAvB,CAA2B,CAACkB,IAAD,EAAOtC,KAAP,KAAiB;AACxC2B,YAAAA,WAAW,CAACY,IAAZ,CAAiBD,IAAI,CAACE,IAAL,GAAY,GAAZ,GAAkBF,IAAI,CAACrC,EAAvB,GAA4B,GAA5B,IAAmCqC,IAAI,CAACK,MAAL,KAAgB,IAAhB,GAAuBL,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeC,GAAtC,GAA4C,EAA/E,CAAjB;AACH,WAFD;AAGArD,UAAAA,KAAK,CAACa,OAAN,CAAcuB,WAAd;AACH,SAPD;AAQH,OAbI,MAcA,IAAIpC,KAAK,CAACqB,KAAN,KAAgB,OAApB,EACL;AACIrB,QAAAA,KAAK,CAACuC,OAAN,CAAce,sBAAd,GACCb,IADD,CACOC,QAAD,IAAc;AAChB,cAAIa,MAAM,GAAGb,QAAQ,CAACa,MAAT,CAAgBC,MAAhB,CAAwBC,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAevB,SAAf,CAAlC,CAAb;;AACA,cAAIoB,MAAM,CAAC5B,MAAP,GAAgB,CAApB,EAAuB;AACnB3B,YAAAA,KAAK,CAACa,OAAN,CAAc0C,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAd;AACH,WAFD,MAGK3D,KAAK,CAACa,OAAN,CAAc0C,MAAd;AACR,SAPD;AAQH;AACJ;AACJ;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,KAAK,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BvD,KAAK,CAACqB,KAAN,GAAc,GAA5C,CADJ,EAEKO,eAAe,EAFpB,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAIK5B,KAAK,CAACM,KAAN,GAAc,CAAd,iBACD,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAC,mCAA5B;AAAgE,IAAA,OAAO,EAAE,MAAMH,UAAU,EAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SALJ,CADJ;AAUH;;AAED,eAAeJ,QAAf","sourcesContent":["import React, {useState} from 'react';\r\nimport $ from 'jquery'\r\n\r\n//Bootstrap\r\nimport Button from 'react-bootstrap/Button'\r\nimport ListGroup from 'react-bootstrap/ListGroup'\r\nimport Form from 'react-bootstrap/Form'\r\nimport ListGroupItem from 'react-bootstrap/esm/ListGroupItem';\r\n\r\nfunction Selector (props) {\r\n    const [elements, setElements] = useState([])\r\n\r\n    function addElement () {\r\n        setElements(elements.concat([\"\"]))\r\n        props.setCount(props.count + 1)\r\n    }\r\n\r\n    function changePlaceholder (newPlaceholder, index, id) {\r\n        let newElements = [...elements];\r\n        newElements[index] = newPlaceholder + \";false;\" + id;\r\n        setElements(newElements);\r\n        setList(newElements);\r\n        props.setRecs([]);\r\n    }\r\n\r\n    function removeElement (index) {\r\n        let newElements = [...elements];\r\n        newElements.splice(index,1);\r\n        setElements(newElements);\r\n        setList(newElements)\r\n        props.setCount(props.count - 1);\r\n        props.setRecs([]);\r\n    }\r\n\r\n    function changeValue (value, index, id) {\r\n        let newElements = [...elements];\r\n        newElements[index] = value + \";true;\" + id;\r\n        setElements(newElements);\r\n        searchRecommendations(value);\r\n    }\r\n\r\n    function setList (newElements) {\r\n        let newList = [...props.list]\r\n        if (props.title === \"Song\") {\r\n            newList[0] = newElements\r\n            props.setList(newList)\r\n        }\r\n        else if (props.title === \"Artist\") {\r\n            newList[1] = newElements\r\n            props.setList(newList)\r\n        }\r\n        else if (props.title === \"Genre\") {\r\n            newList[2] = newElements\r\n            props.setList(newList)\r\n        }\r\n    }\r\n\r\n    function setFocus (value, index, id) {\r\n        let newElements = [...elements];\r\n        newElements[index] = value + \";true;\" + id;\r\n        setElements(newElements);\r\n        searchRecommendations(value);\r\n    }\r\n\r\n    function returnValue (element) {\r\n        if (element !== \"\")\r\n        {\r\n            return element.split(';')[0];\r\n        }\r\n        else return element;\r\n    }\r\n\r\n    function checkId (element) {\r\n        if (element.split(';').length = 3) {\r\n            return element.split(';')[2]        \r\n        }\r\n    }\r\n\r\n    function displayElements() {\r\n        return (\r\n            elements.map((element, index) => (\r\n                <div>\r\n                    <div class=\"input-group\">\r\n                        <input  type=\"text\" \r\n                                class=\"form-control\"\r\n                                placeholder={props.title + \" name\"} \r\n                                value={returnValue(element)} \r\n                                aria-label=\"Recipient's username\" \r\n                                aria-describedby=\"basic-addon2\"\r\n                                onChange={e => changeValue(e.target.value, index, checkId(element))}\r\n                                onBlur={(e) => changePlaceholder(e.target.value, index, checkId(element))}\r\n                                onFocus={(e) => setFocus(e.target.value, index), checkId(element)} />\r\n                        <div class=\"input-group-append\">\r\n                            <button class=\"btn btn-outline-secondary\" type=\"button\" onClick={() => removeElement(index)}>X</button>\r\n                        </div>\r\n                    </div>\r\n                    { !(element === \"\" || element.split(';')[1] === \"false\") &&\r\n                    <ListGroup>\r\n                        {searchRecs(index)}\r\n                    </ListGroup>\r\n                    }\r\n                </div>\r\n            ))\r\n        )\r\n    }\r\n\r\n    function searchRecs(index) {\r\n        if (props.recs !== [])\r\n        {\r\n            return (\r\n                props.recs.map((element) => (\r\n                    <ListGroupItem bsPrefix=\"rec-container\">\r\n                        <Button type=\"button\" \r\n                                onClick={() => changeValue(element.split(';')[0], index, element.split(';')[1])}\r\n                                onMouseDown={(e) => e.preventDefault()}\r\n                                bsPrefix=\"rec-button\">\r\n                                {\r\n                                element.split(';').length >= 3 && \r\n                                <img class=\"albumImage\" src={element.split(';')[2]} width=\"40px\" height=\"40px\"></img>\r\n                                }\r\n                                <t class=\"nameText\">{element.split(\" By: \")[0].split(';')[0]}</t>\r\n                                <br />\r\n                                {\r\n                                element.split(\" By: \").length > 1 && \r\n                                <t class=\"artistText\">{\"Artist: \" + element.split(\" By: \")[1].split(';')[0]}</t>\r\n                                }\r\n                        </Button>\r\n                    </ListGroupItem>  \r\n                ))\r\n            )\r\n        }\r\n    }\r\n\r\n    function searchRecommendations(searchVal) {\r\n        if (searchVal !== \"\") {\r\n            let resultArray = [];\r\n            if (props.title === \"Song\")\r\n            {\r\n                const testParams = {\r\n                    limit: 5\r\n                }\r\n                props.spotify.search(searchVal, [\"track\"], testParams)\r\n                .then((response) => {\r\n                    console.log(response)\r\n                    response.tracks.items.map((item, index) => {\r\n                        resultArray.push(item.name + \" By: \" + item.artists[0].name + \";\" + item.id + \";\" + (item.album.images !== null ? item.album.images[0].url : \"\"))\r\n                    })\r\n                    props.setRecs(resultArray)\r\n                })\r\n            }\r\n            else if (props.title === \"Artist\")\r\n            {\r\n                const testParams = {\r\n                    limit: 5\r\n                }\r\n                props.spotify.search(searchVal, [\"artist\"], testParams)\r\n                .then((response) => {\r\n                    console.log(response)\r\n                    response.artists.items.map((item, index) => {\r\n                        resultArray.push(item.name + ';' + item.id + ';' + (item.images !== null ? item.images[0].url : \"\"))\r\n                    })\r\n                    props.setRecs(resultArray)\r\n                })\r\n            }\r\n            else if (props.title === \"Genre\")\r\n            {\r\n                props.spotify.getAvailableGenreSeeds()\r\n                .then((response) => {\r\n                    let genres = response.genres.filter((genre) => genre.includes(searchVal))\r\n                    if (genres.length > 5) {\r\n                        props.setRecs(genres.slice(0, 5))\r\n                    }\r\n                    else props.setRecs(genres)\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label class=\"selectorLabel\">{props.title + 's'}</label>\r\n            {displayElements()}\r\n            <br />\r\n            {props.count < 5 && \r\n            <Button type=\"button\" class=\"btn btn-default btn-circle btn-lg\" onClick={() => addElement()}>+</Button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Selector;"]},"metadata":{},"sourceType":"module"}